import { debounce } from "lodash-es";
import chokidar from "chokidar";
import { globSync } from "glob";
import { readFileSync, writeFileSync } from "fs";
import { dirname, resolve } from "path";
import { Plugin } from "vite";

const PLUGIN_NAME = "vite-i18n-gen-resources-type";
const BANNER = `/*! This file was generated by ${PLUGIN_NAME} check https://github.com/CRMChatReactComponent/vite-i18n-gen-resources-type. Please do not modify. */\n`;

type LangCode = string;
type LangNS = string;
type LangsType = Record<LangCode, Record<LangNS, Record<string, string>>>;

const rebuild = debounce(_rebuild, 1000);

export function GenI18nTypes(props: {
  watchFolder: string;
  outputFolder?: string;
  isGenEnumFile?: boolean;
  typesFileName?: string;
  enumFileName?: string;
  defaultLang?: string;
}): Plugin[] {
  const {
    watchFolder,
    outputFolder = dirname(watchFolder),
    isGenEnumFile = true,
    typesFileName = "genI18n.resources.d.ts",
    enumFileName = "genI18nEnum.ts",
    defaultLang = "",
  } = props;

  const enumFilePath = resolve(outputFolder, enumFileName);
  const typesFilePath = resolve(outputFolder, typesFileName);

  return [
    {
      name: "vite-gen-i18n-types",
      apply: "serve",

      configureServer({ watcher, config: { logger } }) {
        watcher.unwatch([enumFilePath, typesFilePath]);
        chokidar
          .watch(`${props.watchFolder}/**/*.json`, {
            depth: 2,
          })
          .on("all", build);

        build();
        function build() {
          rebuild(
            props.watchFolder,
            typesFilePath,
            defaultLang,
            isGenEnumFile,
            enumFilePath,
          );
        }
      },
    },
    {
      name: "vite-gen-i18n-types-build",
      apply: "build",
      options() {
        _rebuild(
          props.watchFolder,
          typesFilePath,
          defaultLang,
          isGenEnumFile,
          enumFilePath,
        );
      },
    },
  ];
}

function _rebuild(
  watchFolder: string,
  typesFilePath: string,
  defaultLang: string,
  isGenEnumFile: boolean,
  enumFilePath: string,
) {
  const jsonGlob = `${watchFolder}/**/*.json`;
  const jsonFiles = globSync(jsonGlob);
  const langs: LangsType = {};

  for (const filePath of jsonFiles) {
    const lang = filePath.match(/\/locales\/([\w-]+)\//);
    const filename = filePath.match(/\/([\w-_]+)\.json$/);

    if (filename && lang) {
      langs[lang[1]] = langs[lang[1]] || {};
      try {
        langs[lang[1]][filename[1]] = JSON.parse(
          readFileSync(filePath, "utf-8"),
        );
      } catch (e: unknown) {
        console.error(
          `${PLUGIN_NAME}: the file cannot be parse to json, path:${filePath}`,
        );
      }
    } else {
      console.error(
        `${PLUGIN_NAME}: the file cannot be parse to json, path:${filePath}`,
      );
    }
  }

  if (Object.keys(langs).length > 0) {
    writeFileSync(
      typesFilePath,
      genTypesFileContent(langs, defaultLang),
      "utf-8",
    );

    isGenEnumFile &&
      writeFileSync(enumFilePath, genEnumFileContent(langs), "utf-8");

    console.info(`${PLUGIN_NAME}: gen successfully`);
  } else {
    console.error(
      `${PLUGIN_NAME}: Unable to read **/*.json files under ${jsonGlob}, please check if the path is correct.`,
    );
  }
}

/**
 * 生成 genI18nEnum.ts 内容
 * @param langs
 */
function genEnumFileContent(langs: LangsType): string {
  let code = `${BANNER}export enum GenI18nEnum {`;

  for (const key of Object.keys(langs)) {
    const langKey = key.toUpperCase().replaceAll("-", "_");
    code += `\n  ${langKey} = "${key}",`;
  }

  return code + "\n}\n";
}
/**
 * 生成 genI18n.resources.d.ts 内容
 * @param langs
 * @param defaultLang
 */
function genTypesFileContent(langs: LangsType, defaultLang: string): string {
  defaultLang = defaultLang ? defaultLang : Object.keys(langs)[0];

  let code = `${BANNER}export interface I18nResourceInterface {`;

  for (const key of Object.keys(langs[defaultLang])) {
    const translationObj: Record<string, string> = langs[defaultLang][key];
    code += `\n  ${key}: {`;

    for (const _key of Object.keys(translationObj)) {
      code += `\n    ${_key}: "${translationObj[_key].replaceAll(`"`, "'")}";`;
    }

    code += "\n  };";
  }

  return code + "\n}\n";
}
